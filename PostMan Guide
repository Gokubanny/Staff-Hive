# Staff Hive Central Backend - Postman Testing Guide

## Base URL
```
http://localhost:5000
```

## Headers Required for ALL Requests
```
Content-Type: application/json
```

## Headers Required for PROTECTED Routes (after login)
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

---

## 1. AUTHENTICATION ENDPOINTS

### 1.1 Register User
**POST** `http://localhost:5000/api/auth/register`

**Headers:**
```
Content-Type: application/json
```

**Body (JSON):**
```json
{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "password": "Password123",
  "role": "admin",
  "companyName": "Tech Solutions Ltd"
}
```

**Alternative for User Role:**
```json
{
  "name": "Jane Smith",
  "email": "jane.smith@example.com",
  "password": "Password123",
  "role": "user",
  "employeeId": "EMP001"
}
```

### 1.2 Login User
**POST** `http://localhost:5000/api/auth/login`

**Headers:**
```
Content-Type: application/json
```

**Body (JSON):**
```json
{
  "email": "john.doe@example.com",
  "password": "Password123",
  "role": "admin"
}
```

**Expected Response:**
```json
{
  "success": true,
  "message": "Welcome back, John Doe!",
  "data": {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "user": {
      "_id": "...",
      "name": "John Doe",
      "email": "john.doe@example.com",
      "role": "admin"
    }
  }
}
```

### 1.3 Get Current User
**GET** `http://localhost:5000/api/auth/me`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

### 1.4 Update Profile
**PUT** `http://localhost:5000/api/auth/profile`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "name": "John Updated Doe",
  "companyName": "Updated Tech Solutions"
}
```

### 1.5 Change Password
**PUT** `http://localhost:5000/api/auth/change-password`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "currentPassword": "Password123",
  "newPassword": "NewPassword123"
}
```

### 1.6 Logout
**POST** `http://localhost:5000/api/auth/logout`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

---

## 2. EMPLOYEE ENDPOINTS

### 2.1 Get All Employees
**GET** `http://localhost:5000/api/employees`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Query Parameters (Optional):**
```
?search=john&department=Engineering&status=active&page=1&limit=10
```

### 2.2 Get Single Employee
**GET** `http://localhost:5000/api/employees/EMPLOYEE_ID`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

### 2.3 Add New Employee
**POST** `http://localhost:5000/api/employees`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "name": "Alice Johnson",
  "email": "alice.johnson@company.com",
  "phone": "+234 803 123 4567",
  "position": "Software Engineer",
  "department": "Engineering",
  "salary": 1200000,
  "hireDate": "2025-08-31",
  "status": "active"
}
```

### 2.4 Update Employee
**PUT** `http://localhost:5000/api/employees/EMPLOYEE_ID`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "name": "Alice Updated Johnson",
  "salary": 1300000,
  "position": "Senior Software Engineer"
}
```

### 2.5 Update Employee Status
**PATCH** `http://localhost:5000/api/employees/EMPLOYEE_ID/status`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "status": "inactive"
}
```

### 2.6 Delete Employee
**DELETE** `http://localhost:5000/api/employees/EMPLOYEE_ID`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

---

## 3. COMPANY ENDPOINTS

### 3.1 Get All Companies
**GET** `http://localhost:5000/api/companies`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

### 3.2 Add New Company
**POST** `http://localhost:5000/api/companies`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "name": "Tech Innovations Ltd",
  "industry": "Technology",
  "size": "51-200",
  "location": "Lagos, Nigeria",
  "founded": 2015,
  "website": "https://techinnovations.com",
  "email": "info@techinnovations.com",
  "phone": "+234 801 234 5678",
  "description": "Leading technology company in Nigeria"
}
```

### 3.3 Update Company
**PUT** `http://localhost:5000/api/companies/COMPANY_ID`

### 3.4 Delete Company
**DELETE** `http://localhost:5000/api/companies/COMPANY_ID`

---

## 4. APPLICANT ENDPOINTS

### 4.1 Get All Applicants
**GET** `http://localhost:5000/api/applicants`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Query Parameters (Optional):**
```
?stage=applied&search=john&page=1&limit=10
```

### 4.2 Add New Applicant
**POST** `http://localhost:5000/api/applicants`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "firstName": "Michael",
  "lastName": "Brown",
  "email": "michael.brown@email.com",
  "phone": "+234 806 789 0123",
  "position": "Frontend Developer",
  "experience": "Mid-Level (3-5 years)",
  "expectedSalary": 800000,
  "location": "Lagos, Nigeria",
  "source": "LinkedIn",
  "coverLetter": "I am excited to apply for this position...",
  "notes": "Strong candidate with React experience"
}
```

### 4.3 Update Applicant Stage
**PATCH** `http://localhost:5000/api/applicants/APPLICANT_ID/stage`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "stage": "interview"
}
```

**Available Stages:**
- applied
- screening
- interview
- offer
- hired
- rejected

---

## 5. JOB ENDPOINTS

### 5.1 Get All Jobs
**GET** `http://localhost:5000/api/jobs`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

### 5.2 Add New Job
**POST** `http://localhost:5000/api/jobs`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "title": "Senior Full Stack Developer",
  "company": "Tech Solutions Ltd",
  "department": "Engineering",
  "location": "Lagos, Nigeria",
  "type": "full-time",
  "description": "We are looking for an experienced full stack developer to join our team...",
  "experienceLevel": "senior",
  "salary": 1500000,
  "requirements": ["React", "Node.js", "MongoDB", "5+ years experience"],
  "benefits": ["Health Insurance", "Remote Work", "Flexible Hours"]
}
```

### 5.3 Update Job Status
**PATCH** `http://localhost:5000/api/jobs/JOB_ID/status`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "status": "paused"
}
```

---

## 6. PAYROLL ENDPOINTS

### 6.1 Get All Payroll Records
**GET** `http://localhost:5000/api/payroll`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

### 6.2 Generate Payroll for Multiple Employees
**POST** `http://localhost:5000/api/payroll/generate`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "employeeIds": ["EMPLOYEE_ID_1", "EMPLOYEE_ID_2"],
  "period": "2025-08"
}
```

### 6.3 Add Single Payroll Record
**POST** `http://localhost:5000/api/payroll`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

**Body (JSON):**
```json
{
  "employeeId": "EMPLOYEE_ID",
  "employeeName": "John Doe",
  "baseSalary": 1000000,
  "overtime": 50000,
  "bonuses": 100000,
  "deductions": {
    "tax": 75000,
    "pension": 80000,
    "other": 10000
  },
  "totalAmount": 985000,
  "period": "2025-08"
}
```

---

## 7. ANALYTICS ENDPOINT

### 7.1 Get Analytics Dashboard
**GET** `http://localhost:5000/api/analytics`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE
```

---

## 8. HEALTH CHECK

### 8.1 Health Check
**GET** `http://localhost:5000/api/health`

**Headers:**
```
Content-Type: application/json
```

---

## TESTING WORKFLOW

### Step 1: Start Your Server
```bash
npm run dev
```

### Step 2: Test Health Check
**GET** `http://localhost:5000/api/health`

### Step 3: Register a User
Use